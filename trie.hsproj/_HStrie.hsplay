-- Haskell Playground 1.0
--let begins ::  (Ord a, Foldable f) => f a -> Trie a -> Trie a
--    begins = foldr f id where
--      f e a = fmap (M.lookup e) (M.singleton e . a)

let pp :: Int -> Int -> Maybe Int
    pp x y = Just (x + y)
    
let f = fmap (pp 3) (*3)

f 1

let fx :: (Int -> Int) -> (Char -> Char)
    fx _ = id





(>=>)